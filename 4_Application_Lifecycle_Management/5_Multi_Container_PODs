**************************************************************************
******* 5_Multi Container PODs *******************************************
**************************************************************************
--------------------------------------------------------------------------------

1. Identify the number of containers created in the red pod.
controlplane ~ ➜  gp | grep red
red         3/3     Running   0          66s ---> 3
--------------------------------------------------------------------------------
2. Identify the name of the containers running in the blue pod.
descp bluу ---> Containers:
  teal: ---> teal & navy
Same info in kubectl edit pod blue
--------------------------------------------------------------------------------
3. Create a multi-container pod with 2 containers.
Use the spec given below:
If the pod goes into the crashloopbackoff then add the command sleep 1000 in the lemon container.
--
Name: yellow
Container 1 Name: lemon
Container 1 Image: busybox
Container 2 Name: gold
Container 2 Image: redis

controlplane ~ ➜  vi yellow.yml

apiVersion: v1
kind: Pod
metadata: 
  name: yellow
spec:
  containers:
  - command:
    - sleep
    - "4500"
    name: lemon
    image: busybox
  - command:
    - sleep
    - "4500"      
    name: gold
    image: redis

kubectl apply -f yellow.yml
--------------------------------------------------------------------------------
4. info
We have deployed an application logging stack in the elastic-stack namespace. Inspect it.
Before proceeding with the next set of questions, 
please wait for all the pods in the elastic-stack namespace to be ready. 
This can take a few minutes.

controlplane ~ ➜  kubectl get all -n elastic-stack
NAME                 READY   STATUS    RESTARTS   AGE
pod/app              1/1     Running   0          16m
pod/elastic-search   1/1     Running   0          16m
pod/kibana           1/1     Running   0          16m

NAME                    TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)                         AGE
service/elasticsearch   NodePort   172.20.145.19   <none>        9200:30200/TCP,9300:30300/TCP   16m
service/kibana          NodePort   172.20.60.188   <none>        5601:30601/TCP                  16m
--------------------------------------------------------------------------------

5. Once the pod is in a ready state, inspect the Kibana UI using the link above your terminal. There shouldn't be any logs for now.
We will configure a sidecar container for the application to send logs to Elastic Search.
NOTE: It can take a couple of minutes for the Kibana UI to be ready after the Kibana pod is ready.
You can inspect the Kibana logs by running:

kubectl -n elastic-stack logs kibana

controlplane ~ ➜  kubectl -n elastic-stack logs kibana | more
{"type":"log","@timestamp":"2024-12-29T06:59:47Z","tags":["status","plugin:kibana@6.4.2","info"],"pid":1,"state":"
green","message":"Status changed from uninitialized to green - Ready","prevState":"uninitialized","prevMsg":"unini
tialized"}
{"type":"log","@timestamp":"2024-12-29T06:59:47Z","tags":["status","plugin:elasticsearch@6.4.2","info"],"pid":1,"s
tate":"yellow","message":"Status changed from uninitialized to yellow - Waiting for Elasticsearch","prevState":"un
initialized","prevMsg":"uninitialized"}
--------------------------------------------------------------------------------

6. Inspect the "app" pod and identify the number of containers in it.
It is deployed in the elastic-stack namespace.
controlplane ~ ✖ kubectl get pods app
NAME   READY   STATUS    RESTARTS   AGE
app    1/1     Running   0          21m ---> 1
--------------------------------------------------------------------------------

7. The application outputs logs to the file /log/app.log. View the logs and 
try to identify the user having issues with Login.
Inspect the log file inside the pod.

controlplane ~ ➜ kubectl exec -it app -- cat /log/app.log -n elastic-stack 
--- or ---
controlplane ~ ➜ kubectl exec -n elastic-stack -it app -- more /log/app.log
[2024-12-29 06:59:09,750] INFO in event-simulator: USER4 is viewing page3
[2024-12-29 06:59:10,751] INFO in event-simulator: USER3 is viewing page2
[2024-12-29 06:59:11,752] INFO in event-simulator: USER2 is viewing page1
---> user5
--------------------------------------------------------------------------------

8. Edit the pod in the "elastic-stack" namespace to add a sidecar container to send logs to Elastic Search. Mount the log volume to the sidecar container.
Only add a new container. Do not modify anything else. Use the spec provided below.
Note: State persistence concepts are discussed in detail later in this course. 
For now please make use of the below documentation link for updating the concerning pod.
https://kubernetes.io/docs/tasks/access-application-cluster/communicate-containers-same-pod-shared-volume/

Name: app
Container Name: sidecar
Container Image: kodekloud/filebeat-configured
Volume Mount: log-volume
Mount Path: /var/log/event-simulator/
Existing Container Name: app
Existing Container Image: kodekloud/event-simulator

kubectl get pod -n elastic-stack app -oyaml > elk.pod
kubectl delete pod -n elastic-stack app

under 
spec:
  containers: just add this block:

  - image: kodekloud/filebeat-configured
    name: sidecar
    volumeMounts:
    - mountPath: /var/log/event-simulator/
      name: log-volume
      readOnly: true

kubectl create -f elk.pod -n elastic-stack
controlplane ~ ➜  gp -n elastic-stack | grep app
app              2/2     Running   0          28s
--------------------------------------------------------------------------------

9. Inspect the Kibana UI. You should now see logs appearing in the Discover section.
You might have to wait for a couple of minutes for the logs to populate. 
You might have to create an index pattern to list the logs. 
If not sure check this video: https://bit.ly/2EXYdHf

Now in KibanaUI ---> Discover we have logs
--------------------------------------------------------------------------------
