**************************************************************************
******* Secrets *********************************************************
**************************************************************************
-----------------------------------------------------------------------------


1. How many Secrets exist on the system?
In the current(default) namespace.
controlplane ~ ➜  kubectl get secrets 
NAME              TYPE                                  DATA   AGE
dashboard-token   kubernetes.io/service-account-token   3      29s

2. How many secrets are defined in the dashboard-token secret?
---> 3

3. What is the type of the dashboard-token secret?
---> kubernetes.io/service-account-token 

4. Which of the following is not a secret data defined in dashboard-token secret?
controlplane ~ ➜  kubectl describe secrets dashboard-token 
Name:         dashboard-token
Namespace:    default
Labels:       <none>
Annotations:  kubernetes.io/service-account.name: dashboard-sa
              kubernetes.io/service-account.uid: 5edd076f-da6a-4b79-980c-e50e814515d8
Type:  kubernetes.io/service-account-token
Data
====
ca.crt:     570 bytes
namespace:  7 bytes
token:      eyJhbGciOiJSUzI1NiIsImtpZCI6ImRmMFphNF9uVWhDNkgxeDFFTWJ
---> type

5. We are going to deploy an application with the below architecture
We have already deployed the required pods and services. Check out the pods and services created. 
Check out the web application using the Webapp MySQL link above your terminal, 
next to the Quiz Portal Link.
 Webapp MySQL checking = Failed connecting to the MySQL database.
Environment Variables: DB_Host=Not Set; DB_Database=Not Set; DB_User=Not Set; DB_Password=Not Set; 2003: Can't connect to MySQL server on 'localhost:3306' (111 Connection refused)
From webapp-pod!

Button ok

6. The reason the application is failed is because we have not created the secrets yet. 
Create a new secret named db-secret with the data given below.
You may follow any one of the methods discussed in lecture to create the secret.
Secret Name: db-secret
Secret 1: DB_Host=sql01
Secret 2: DB_User=root
Secret 3: DB_Password=password123

 ---VVVVV WORKED ------ 
apiVersion: v1
kind: Secret
metadata:
  name: test-secret
data:
  username: bXktYXBw
  password: Mzk1MjgkdmRnN0pi

==== OR ==========

 ---VVVVV WORKED ------ 
controlplane ~ ➜  kubectl create secret generic db-secret \
  --from-literal=DB_Host=sql01 \
  --from-literal=DB_User=root \
  --from-literal=DB_Password=password123
secret/db-secret created

7. Configure webapp-pod to load environment variables from the newly created secret.
Delete and recreate the pod if required.

Pod name: webapp-pod
Image name: kodekloud/simple-webapp-mysql
Env From: Secret=db-secret

controlplane ~ ➜  kubectl get pod webapp-pod -oyaml > pod.yml
controlplane ~ ➜  kubectl delete pod webapp-pod
pod "webapp-pod" deleted

NEED BLOCK:
spec:
  containers:
  - image: kodekloud/simple-webapp-mysql
    imagePullPolicy: Always
    name: webapp
    envFrom:
    - secretRef:
        name: db-secret
    resources: {}

kubectl create -f pod.yml


8. View the web application to verify it can successfully connect to the database
Now Green 
Successfully connected to the MySQL database.
Environment Variables: DB_Host=sql01; DB_Database=Not Set; DB_User=root; DB_Password=password123;
From webapp-pod!
