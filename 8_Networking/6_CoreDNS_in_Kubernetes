**************************************************************************
******* 6_CoreDNS_in_Kubernetes ******************************************
**************************************************************************
-----------------------------------------------------------------------------


1. Identify the DNS solution implemented in this cluster.
controlplane ~ ➜  kubectl get pods -n kube-system 
NAME                                   READY   STATUS    RESTARTS   AGE
coredns-77d6fd4654-2f9hr               1/1     Running   0          2m46s
coredns-77d6fd4654-lfklj               1/1     Running   0          2m46s
--- > coredns
-------------------------------------------------------------------------------------------------

2. How many pods of the DNS server are deployed?
controlplane ~ ➜  kubectl get deploy -n kube-system
NAME      READY   UP-TO-DATE   AVAILABLE   AGE
coredns   2/2     2            2           4m57s ---> 2 or solution above
-------------------------------------------------------------------------------------------------

3. What is the name of the service created for accessing CoreDNS?
controlplane ~ ➜  kubectl get service -n kube-system 
NAME       TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)                  AGE
kube-dns   ClusterIP   172.20.0.10   <none>        53/UDP,53/TCP,9153/TCP   7m37s
-------------------------------------------------------------------------------------------------

4. What is the IP of the CoreDNS server that should be configured on PODs to resolve services?
controlplane ~ ➜  kubectl describe service -n kube-system kube-dns | grep -i ips:
IPs:                      172.20.0.10 <------------------- Answer
-------------------------------------------------------------------------------------------------

5. Where is the configuration file located for configuring the CoreDNS service?
controlplane ~ ➜  kubectl describe deployments.apps -n kube-system coredns 
Name:                   coredns
Namespace:              kube-system
CreationTimestamp:      Sat, 11 Jan 2025 16:30:08 +0000
Labels:                 k8s-app=kube-dns
Annotations:            deployment.kubernetes.io/revision: 1
Selector:               k8s-app=kube-dns
Replicas:               2 desired | 2 updated | 2 total | 2 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  1 max unavailable, 25% max surge
Pod Template:
  Labels:           k8s-app=kube-dns
  Service Account:  coredns
  Containers:
   coredns:
    Image:       registry.k8s.io/coredns/coredns:v1.10.1
    Ports:       53/UDP, 53/TCP, 9153/TCP
    Host Ports:  0/UDP, 0/TCP, 0/TCP
    Args:
      -conf
      /etc/coredns/Corefile

--- or --- 

controlplane ~ ➜  kubectl -n kube-system describe deployments.apps coredns | grep -A2 Args | grep -i coredns
      /etc/coredns/Corefile
-------------------------------------------------------------------------------------------------

6. How is the Corefile passed into the CoreDNS POD?
controlplane ~ ➜  kubectl get configmap -n kube-system | grep coredns
coredns                                                1      21m
---> Configured as a ConfigMap object
-------------------------------------------------------------------------------------------------

7. What is the name of the ConfigMap object created for Corefile? ---> coredns
controlplane ~ ➜  kubectl get cm -n kube-system | grep coredns
coredns                                                1      21m <--- Answer
-------------------------------------------------------------------------------------------------

8. What is the root domain/zone configured for this kubernetes cluster?
controlplane ~ ➜  kubectl describe configmap -n kube-system coredns | grep kubernetes
    kubernetes cluster.local in-addr.arpa ip6.arpa {
---> cluster.local
-------------------------------------------------------------------------------------------------

9. We have deployed a set of PODs and Services in the default and payroll namespaces. 
Inspect them and go to the next question.
-------------------------------------------------------------------------------------------------

10. What name can be used to access the "hr" web server from the "test" Application?
You can execute a curl command on the "test" pod to test. Alternatively, the test Application also has a UI. 
Access it using the tab at the top of your terminal named "test-app".

controlplane ~ ➜  kubectl get pods
NAME                READY   STATUS    RESTARTS   AGE
hr                  1/1     Running   0          29m
simple-webapp-1     1/1     Running   0          28m
simple-webapp-122   1/1     Running   0          28m
test                1/1     Running   0          29m

controlplane ~ ➜  kubectl get service
NAME           TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE
kubernetes     ClusterIP   172.20.0.1     <none>        443/TCP        31m
test-service   NodePort    172.20.93.81   <none>        80:30080/TCP   29m
web-service    ClusterIP   172.20.139.6   <none>        80/TCP         29m
--------------------------------------------------------------------------
controlplane ~ ➜  kubectl get pods -n payroll 
NAME   READY   STATUS    RESTARTS   AGE
web    1/1     Running   0          29m

controlplane ~ ➜  kubectl get service -n payroll 
NAME          TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE
web-service   ClusterIP   172.20.80.75   <none>        80/TCP    29m
Answer --------------------> web-service
-------------------------------------------------------------------------------------------------

11. Which of the names CANNOT be used to access the HR service from the test pod?
1 web-service.default ----> This is the HR server!
2 web-service.default.svc -> This is the HR server!
3 web-service.default.pod -> Failed to establish a new connection: [Errno -2] Name does not resolve <--- Answer
4 web-service -------------> This is the HR server!
-------------------------------------------------------------------------------------------------

12. Which of the below name can be used to access the "payroll" service from the test application?
1 web-service -----------> This is the HR server!
2 web-service.payroll ---> This is the PayRoll server! <--------------------- Answer (and port 80)
3 web-service.default ---> This is the HR server!
4 web -> Failed to establish a new connection: [Errno -2] Name does not resolve
-------------------------------------------------------------------------------------------------

13. Which of the below name CANNOT be used to access the "payroll" service from the test application?
1 web-service.payroll.svc ---------------> This is the PayRoll server!
2 web-service.payroll.svc.cluster ------> Failed to establish a new connection: [Errno -2] Name does not resolve <-A
3 web-service.payroll -------------------> This is the PayRoll server!
4 web-service.payroll.svc.cluster.local -> This is the PayRoll server!
-------------------------------------------------------------------------------------------------

14. We just deployed a web server - "webapp" - that accesses a database "mysql" - server. 
However the web server is failing to connect to the database server. Troubleshoot and fix the issue.
They could be in different namespaces. First locate the applications. 
The web server interface can be seen by clicking the tab "Web Server" at the top of your terminal.

Web Server: webapp
Uses the right DB_Host name

controlplane ~ ➜  kubectl get namespaces payroll hr default 
NAME      STATUS   AGE
payroll   Active   49m
hr        Active   49m
default   Active   51m

controlplane ~ ➜  kubectl get service -n payroll 
NAME          TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE
mysql         ClusterIP   172.20.245.254   <none>        3306/TCP   5m35s
web-service   ClusterIP   172.20.80.75     <none>        80/TCP     50m

controlplane ~ ➜  kubectl get service -n hr
No resources found in hr namespace.

controlplane ~ ➜  kubectl get service -n default 
NAME             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
kubernetes       ClusterIP   172.20.0.1      <none>        443/TCP          52m
test-service     NodePort    172.20.93.81    <none>        80:30080/TCP     50m
web-service      ClusterIP   172.20.139.6    <none>        80/TCP           50m
webapp-service   NodePort    172.20.66.213   <none>        8080:30082/TCP   5m47s

test-service     NodePort    172.20.93.81    <none>        80:30080/TCP     50m - in default
mysql         ClusterIP   172.20.245.254   <none>        3306/TCP   5m35s
web-service   ClusterIP   172.20.80.75     <none>        80/TCP     50m

controlplane ~ ➜  kubectl get deployments.apps --all-namespaces
NAMESPACE     NAME      READY   UP-TO-DATE   AVAILABLE   AGE
default       webapp    1/1     1            1           7m56s
kube-system   coredns   2/2     2            2           54m

template:
    metadata:
      creationTimestamp: null
      labels:
        name: webapp
    spec:
      containers:
      - env:
        - name: DB_Host
          value: mysql.payroll <------------------------------ Here add ".payrool"(<SVC>.<NS>) - other NS
-------------------------------------------------------------------------------------------------

15. From the "hr" pod nslookup the "mysql" service and redirect the output to a file "/root/CKA/nslookup.out"
controlplane ~ ➜  kubectl exec -it hr -- nslookup mysql.payroll > /root/CKA/nslookup.out
-------------------------------------------------------------------------------------------------
