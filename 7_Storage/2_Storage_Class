**************************************************************************
******* 2_Storage_Class **************************************************
**************************************************************************
-----------------------------------------------------------------------------


1. How many StorageClasses exist in the cluster right now? ---> 1
controlplane ~ ➜  kubectl get storageclasses.storage.k8s.io 
NAME                   PROVISIONER             RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE
local-path (default)   rancher.io/local-path   Delete          WaitForFirstConsumer   false                  6m47s
-----------------------------------------------------------------------------

2. How about now? How many Storage Classes exist in the cluster? ---> 3
We just created a few new Storage Classes. Inspect them.
controlplane ~ ➜  kubectl get storageclasses.storage.k8s.io 
NAME                        PROVISIONER                     RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE
local-path (default)        rancher.io/local-path           Delete          WaitForFirstConsumer   false                  7m40s
local-storage               kubernetes.io/no-provisioner    Delete          WaitForFirstConsumer   false                  39s
portworx-io-priority-high   kubernetes.io/portworx-volume   Delete          Immediate              false                  39s

-----------------------------------------------------------------------------

3. What is the name of the Storage Class that does not support dynamic volume provisioning?

controlplane ~ ✖ kubectl describe storageclasses.storage.k8s.io portworx-io-priority-high | grep -i provis
Provisioner:           kubernetes.io/portworx-volume

controlplane ~ ➜  kubectl describe storageclasses.storage.k8s.io local-path | grep -i provis
Provisioner:           rancher.io/local-path

controlplane ~ ➜  kubectl describe storageclasses.storage.k8s.io local-storage | grep -i provis
Provisioner:           kubernetes.io/no-provisioner  <---------- Answer
-----------------------------------------------------------------------------

4. What is the Volume Binding Mode used for this storage class (the one identified in the previous question)?
controlplane ~ ➜  kubectl describe storageclasses.storage.k8s.io local-storage | grep -i binding
VolumeBindingMode:     WaitForFirstConsumer   <---------- Answer
-----------------------------------------------------------------------------

5. What is the Provisioner used for the storage class called portworx-io-priority-high?
controlplane ~ ➜  kubectl describe storageclasses.storage.k8s.io portworx-io-priority-high | grep -i provis
Provisioner:           kubernetes.io/portworx-volume   <---------- Answer
-----------------------------------------------------------------------------

6. Is there a PersistentVolumeClaim that is consuming the PersistentVolume called local-pv?

controlplane ~ ➜  kubectl get pv local-pv
NAME       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS    VOLUMEATTRIBUTESCLASS   REASON   AGE
local-pv   500Mi      RWO            Retain           Available           local-storage   <unset>                          7m53s

controlplane ~ ➜  kubectl get pvc ---> No resources found in default namespace.  ---> No
-----------------------------------------------------------------------------

7. Let's fix that. Create a new PersistentVolumeClaim by the name of local-pvc that should bind to the volume local-pv.
Inspect the pv local-pv for the specs.

controlplane ~ ➜  kubectl describe pv local-pv | grep -i StorageClass
StorageClass:      local-storage  <--- need this class

name          = local-pvc
requests      = 500Mi
correct mode  = ?
correct class = ?

controlplane ~ ➜  vi pvc.yml
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: local-pvc
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: local-storage
  resources:
    requests:
      storage: 500Mi

controlplane ~ ➜  kubectl create -f pvc.yml ---> persistentvolumeclaim/local-pvc created
-----------------------------------------------------------------------------

8. controlplane ~ ➜  kubectl get pvc
NAME        STATUS    VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS    VOLUMEATTRIBUTESCLASS   AGE
local-pvc   Pending                                      local-storage   <unset>                 48s
---> Pending
-----------------------------------------------------------------------------

9. Why is the PVC in a pending state despite making a valid request to claim the volume called local-pv?
Inspect the PVC events.
controlplane ~ ➜  kubectl describe pvc local-pvc
 Message = WaitForFirstConsumer (waiting for first consumer to be created before binding)
---> A Pod consuming the volume is not scheduled
-----------------------------------------------------------------------------

10. The Storage Class called local-storage makes use of VolumeBindingMode set to WaitForFirstConsumer. 
This will delay the binding and provisioning of a PersistentVolume until a Pod using the PersistentVolumeClaim is created.
-----------------------------------------------------------------------------

11. Create a new pod called nginx with the image nginx:alpine. 
The Pod should make use of the PVC local-pvc and mount the volume at the path /var/www/html.
The PV local-pv should be in a bound state.

Pod created with the correct Image?
Pod uses PVC called local-pvc?
local-pv bound?
nginx pod running?
Volume mounted at the correct path?

kubectl run nginx --image=nginx:alpine --dry-run=client -oyaml > nginx.yaml

Next add data for starage:

---
apiVersion: v1
kind: Pod
metadata:
  name: nginx
  labels:
    name: nginx
spec:
  containers:
  - name: nginx
    image: nginx:alpine
    volumeMounts:
      - name: local-persistent-storage
        mountPath: /var/www/html
  volumes:
    - name: local-persistent-storage
      persistentVolumeClaim:
        claimName: local-pvc

controlplane ~ ✖ kubectl create -f nginx.yaml ---> pod/nginx created
-----------------------------------------------------------------------------

12. What is the status of the local-pvc Persistent Volume Claim now? ---> Bound
controlplane ~ ➜  kubectl get pvc
NAME        STATUS   VOLUME     CAPACITY   ACCESS MODES   STORAGECLASS    VOLUMEATTRIBUTESCLASS   AGE
local-pvc   Bound    local-pv   500Mi      RWO            local-storage   <unset>                 13m
-----------------------------------------------------------------------------

13. Create a new Storage Class called delayed-volume-sc that makes use of the below specs:

provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: delayed-volume-sc
provisioner: kubernetes.io/no-provisioner
reclaimPolicy: Retain # default value is Delete
allowVolumeExpansion: true
mountOptions:
  - discard # this might enable UNMAP / TRIM at the block storage layer
volumeBindingMode: WaitForFirstConsumer
parameters:
  guaranteedReadWriteLatency: "true" # provider-specific

--- or ---

---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: delayed-volume-sc
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer

Storage Class uses: kubernetes.io/no-provisioner ?
Storage Class volumeBindingMode set to WaitForFirstConsumer ?

controlplane ~ ➜  kubectl create -f sc.yml  ---> storageclass.storage.k8s.io/delayed-volume-sc created
-----------------------------------------------------------------------------
