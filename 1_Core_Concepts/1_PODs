


controlplane ~ ✖ echo "set number" >> ~/.vimrc




1. How many pods exist on the system? In the current(default) namespace.
controlplane ~ ➜  kubectl get pods ---> No resources found in default namespace. ---> 0
-----------------------------------------------------------------------------------------

2.  How many ReplicaSets exist on the system? In the current(default) namespace.
controlplane ~ ➜  kubectl get rs No resources found in default namespace. ---> 0
-----------------------------------------------------------------------------------------

3. How about now? How many ReplicaSets do you see? We just made a few changes!
controlplane ~ ➜  kubectl get rs
NAME              DESIRED   CURRENT   READY   AGE
new-replica-set   4         4         0       25s ---> 1
-----------------------------------------------------------------------------------------

4. How many PODs are DESIRED in the new-replica-set? ---> 4
-----------------------------------------------------------------------------------------

5. What is the image used to create the pods in the new-replica-set?
controlplane ~ ✖ kubectl describe rs new-replica-set | grep -i image ---> Image: busybox777
-----------------------------------------------------------------------------------------

6. How many PODs are READY in the new-replica-set? ---> 0
-----------------------------------------------------------------------------------------

7. Why do you think the PODs are not ready?
controlplane ~ ➜  kubectl describe pods new-replica-set-kt8g7
    State:          Waiting
      Reason:       ErrImagePull
    Ready:          False
Failed to pull image "busybox777": failed to pull and unpack image "docker.io/library/busybox777:latest": 
failed to resolve reference "docker.io/library/busybox777:latest": pull access denied, repository does not 
exist or may require authorization: server message: insufficient_scope: authorization failed
-----------------------------------------------------------------------------------------

8. Delete any one of the 4 PODs. ---> kubectl delete pod new-replica-set-kt8g7
---> pod "new-replica-set-kt8g7" deleted
-----------------------------------------------------------------------------------------

9. How many PODs exist now? ---> kubectl get pods ---> 4
NAME                    READY   STATUS             RESTARTS   AGE
new-replica-set-mxwrr   0/1     ImagePullBackOff   0          9m53s
new-replica-set-pc6lf   0/1     ImagePullBackOff   0          9m53s
new-replica-set-s79zg   0/1     ImagePullBackOff   0          82s
new-replica-set-v9mgq   0/1     ImagePullBackOff   0          9m53s
-----------------------------------------------------------------------------------------

10. Why are there still 4 PODs, even after you deleted one?
ReplicaSet ensures that desired number of PODs always run <--- Answer
-----------------------------------------------------------------------------------------

11. Create a ReplicaSet using the replicaset-definition-1.yaml file located at /root/.
There is an issue with the file, so try to fix it. ---> kubectl create -f /root/replicaset-definition-1.yaml
error: resource mapping not found for name: "replicaset-1" namespace: "" 
from "/root/replicaset-definition-1.yaml": no matches for kind "ReplicaSet" in version "v1"
ensure CRDs are installed firs

controlplane ~ ➜  vim /root/replicaset-definition-1.yaml
CHANGE "1 apiVersion: v1" ---to--- "  1 apiVersion: apps/v1"
And try again: controlplane ~ ✖ kubectl create -f /root/replicaset-definition-1.yaml
replicaset.apps/replicaset-1 created
info
controlplane ~ ➜  kubectl api-resources | grep replicaset
replicasets    rs     apps/v1    true    ReplicaSet
controlplane ~ ➜  kubectl explain replicaset | grep VERSION ---> VERSION:    v1
-----------------------------------------------------------------------------------------

12. Fix the issue in the replicaset-definition-2.yaml file and create a ReplicaSet using it.
This file is located at /root/.

controlplane ~ ➜  kubectl create -f /root/replicaset-definition-2.yaml 
The ReplicaSet "replicaset-2" is invalid: spec.template.metadata.labels: Invalid value: 
map[string]string{"tier":"nginx"}: `selector` does not match template `labels`

The values for labels on lines 9 and 13 should match.
  "9       tier: frontend" ---to---   "9       tier: nginx"
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------

kubectl run --image=nginx nginx

kubectl describe pod newpods-68jqt | grep image
  Normal  Pulling    3m     kubelet            Pulling image "busybox"

kubectl describe pod newpods-jdw52 | grep Node



apiVersion: v1
kind: Pod
metadata: 
  name: redis
spec:
  containers:
  - name: redis-container
    image: redis123
kubectl apply -f RedisPod.yml
