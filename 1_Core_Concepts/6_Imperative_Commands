********************************************************
******** 6_Imperative_Commands *************************
********************************************************
-------------------------------------------------------------

Deploy a pod named nginx-pod using the nginx:alpine image.
apiVersion: v1
kind: Pod
metadata: 
  name: nginx-pod
  labels:
    tier: ng
spec:
  containers:
  - name: ng-container
    image: nginx:alpine

----------------------
Deploy a redis pod using the redis:alpine image with the labels set to tier=db.

apiVersion: v1
kind: Pod
metadata: 
  name: redis
  labels:
    tier: db
spec:
  containers:
  - name: redis-container
    image: redis:alpine
                     


-------------------------------



Create a service "redis-service" to expose the redis application within the cluster on port 6379.
Service: redis-service
Port: 6379
Type: ClusterIP


apiVersion: v1
kind: Service
metadata: 
  name: redis-service
  labels:
    tier: db
spec:
  ports:
    - port: 6379
  type: ClusterIP







--------------------------------

Create a deployment named webapp using the image kodekloud/webapp-color with 3 replicas.
kubectl create deployment webapp --image=kodekloud/webapp-color --replicas=3
deployment.apps/webapp created


----------------------------- 

Create a new pod called custom-nginx using the nginx image and run it on container port 8080.
kubectl run custom-nginx --image=nginx --port=8080 - container port exposed ===> работает
apiVersion: v1 - не работает
kind: Pod - не работает
metadata:  - не работает
  name: custom-nginx - не работает
  labels: - не работает
    tier: db - не работает
spec: - не работает
  containers: - не работает
  - name: cus-ng - не работает
    image: nginx - не работает
  ports: - не работает
    - port: 8080 - не работает





-------------------------------------------------
Create a new deployment called redis-deploy in the dev-ns namespace with the redis image. It should have 2 replicas.




apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deploy
  namespace: dev-ns
spec:
  selector:
    matchLabels:
      run: my-redis
  replicas: 2
  template:
    metadata:
      labels:
        run: my-redis
    spec:
      containers:
      - name: cust-redis
        image: redis
        ports:
        - containerPort: 8080



-----------------------------------------------------
Create a pod called "httpd" using the image "httpd:alpine" in the default namespace. 
Next, create a service of type ClusterIP by the same name ( httpd ). 
The target port for the service should be 80.

apiVersion: v1
kind: Pod
metadata: 
  name: httpd
#  namespace: default
  labels:
    name: simple-webapp
spec:
  containers:
  - name: redis-container
    image: httpd:alpine


apiVersion: v1
kind: Service
metadata:
  name: httpd
#  namespace: default
spec:
  clusterIP: 10.43.0.100
  ports:
  - name: def
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    name: simple-webapp
  type: ClusterIP

