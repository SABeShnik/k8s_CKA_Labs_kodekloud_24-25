3_KubeConfig
----------------------------------------------------------------------------------------------


1. Where is the default kubeconfig file located in the current environment?
Find the current home directory by looking at the HOME environment variable.
controlplane ~ ➜  cat /root/.kube/config
----------------------------------------------------------------------------------------------

2. How many clusters are defined in the default kubeconfig file? ---> 1 ( kubernetes )
----------------------------------------------------------------------------------------------

3. How many Users are defined in the default kubeconfig file? ---> 1 ( kubernetes-admin )
----------------------------------------------------------------------------------------------

4. How many contexts are defined in the default kubeconfig file? ---> kubectl config view --> 1
----------------------------------------------------------------------------------------------

5. What is the user configured in the current context? ---> kubernetes-admin
----------------------------------------------------------------------------------------------

6. What is the name of the cluster configured in the default kubeconfig file? ---> kubernetes
----------------------------------------------------------------------------------------------

7. A new kubeconfig file named "my-kube-config" is created. It is placed in the /root directory. 
How many clusters are defined in that kubeconfig file? ---> controlplane ~/.kube ➜  cat /root/my-kube-config ---> 4
----------------------------------------------------------------------------------------------

8. How many contexts are configured in the my-kube-config file? ---> 4
----------------------------------------------------------------------------------------------

9. What user is configured in the research context? ---> dev-user
----------------------------------------------------------------------------------------------

10. What is the name of the client-certificate file configured for the aws-user?
controlplane ~/.kube ➜  cat /root/my-kube-config | tail -n 8 | head -n 4
- name: aws-user
  user:
    client-certificate: /etc/kubernetes/pki/users/aws-user/aws-user.crt <--- Answer
    client-key: /etc/kubernetes/pki/users/aws-user/aws-user.key
----------------------------------------------------------------------------------------------

11. What is the current context set to in the my-kube-config file?
controlplane ~/.kube ➜  cat /root/my-kube-config | grep -i current-context:
current-context: test-user@development <--- Answer
----------------------------------------------------------------------------------------------

12. I would like to use the dev-user to access test-cluster-1. Set the current context to the right one so I can do that.
Once the right context is identified, use the kubectl config use-context command.

kubectl config get-contexts 
CURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE
*         kubernetes-admin@kubernetes   kubernetes   kubernetes-admin  

cat /root/my-kube-config | grep test-cluster-1
- name: test-cluster-1
    cluster: test-cluster-1
                                              |
Need context from file /root/my-kube-config : V
- name: research <-----------------------------
  context:
    cluster: test-cluster-1
    user: dev-user

controlplane ~/.kube ➜ kubectl config use-contexts research ---> error: unknown command "use-contexts research"
See 'kubectl config -h' for help and examples ---> need specife our config file:

controlplane ~/.kube ➜ kubectl config --kubeconfig=/root/my-kube-config use-context research ---> Switched to context "research".
----- ORIGINAL FILE CONFIG - /root/my-kube-config  ------
controlplane ~/.kube ➜  cat /root/my-kube-config 
apiVersion: v1
kind: Config

clusters:
- name: production
  cluster:
    certificate-authority: /etc/kubernetes/pki/ca.crt
    server: https://controlplane:6443

- name: development
  cluster:
    certificate-authority: /etc/kubernetes/pki/ca.crt
    server: https://controlplane:6443

- name: kubernetes-on-aws
  cluster:
    certificate-authority: /etc/kubernetes/pki/ca.crt
    server: https://controlplane:6443

- name: test-cluster-1
  cluster:
    certificate-authority: /etc/kubernetes/pki/ca.crt
    server: https://controlplane:6443

contexts:
- name: test-user@development
  context:
    cluster: development
    user: test-user

- name: aws-user@kubernetes-on-aws
  context:
    cluster: kubernetes-on-aws
    user: aws-user

- name: test-user@production
  context:
    cluster: production
    user: test-user

- name: research
  context:
    cluster: test-cluster-1
    user: dev-user

users:
- name: test-user
  user:
    client-certificate: /etc/kubernetes/pki/users/test-user/test-user.crt
    client-key: /etc/kubernetes/pki/users/test-user/test-user.key
- name: dev-user
  user:
    client-certificate: /etc/kubernetes/pki/users/dev-user/developer-user.crt
    client-key: /etc/kubernetes/pki/users/dev-user/dev-user.key
- name: aws-user
  user:
    client-certificate: /etc/kubernetes/pki/users/aws-user/aws-user.crt
    client-key: /etc/kubernetes/pki/users/aws-user/aws-user.key

current-context: test-user@development
preferences: {}


controlplane ~/.kube ➜  cat /root/my-kube-config | tail 10
tail: cannot open '10' for reading: No such file or directory

controlplane ~/.kube ✖ cat /root/my-kube-config | tail -n 10
    client-certificate: /etc/kubernetes/pki/users/dev-user/developer-user.crt
    client-key: /etc/kubernetes/pki/users/dev-user/dev-user.key
- name: aws-user
  user:
    client-certificate: /etc/kubernetes/pki/users/aws-user/aws-user.crt
    client-key: /etc/kubernetes/pki/users/aws-user/aws-user.key

current-context: test-user@development
preferences: {}

----------------------------------------------------------------------------------------------

13. We don't want to specify the kubeconfig file option on each kubectl command.
Set the my-kube-config file as the default kubeconfig file and make it persistent across all sessions without 
overwriting the existing ~/.kube/config. Ensure any configuration changes persist across reboots and new shell sessions.
Note: Don't forget to source the configuration file to take effect in the existing session. Example:
source ~/.bashrc

Inspect env vars: controlplane ~/.kube ✖ printenv | grep kube
PWD=/root/.kube
\[\]controlplane\[\] \[\]~/.kube\[\] \[\]✖\[\]  <--- There is no :(

controlplane ~/.kube ➜  kubectl config get-contexts 
CURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE
*         kubernetes-admin@kubernetes   kubernetes   kubernetes-admin

export KUBECONFIG=/root/my-kube-config

controlplane ~/.kube ➜  kubectl config get-contexts 
CURRENT   NAME                         CLUSTER             AUTHINFO    NAMESPACE
          aws-user@kubernetes-on-aws   kubernetes-on-aws   aws-user    
*         research                     test-cluster-1      dev-user    
          test-user@development        development         test-user   
          test-user@production         production          test-user   

Now make it persistant by add EXPORT-string ( export KUBECONFIG=/root/my-kube-config ) into ~/.bashrc:
vi ~/.bashrc
----------------------------------------------------------------------------------------------

14. With the current-context set to research, we are trying to access the cluster. 
However something seems to be wrong. Identify and fix the issue. 
Try running the kubectl get pods command and look for the error. 
All users certificates are stored at /etc/kubernetes/pki/users.

controlplane ~/.kube ➜  kubectl get nodes
error: unable to read client-cert /etc/kubernetes/pki/users/dev-user/developer-user.crt for 
dev-user due to open /etc/kubernetes/pki/users/dev-user/developer-user.crt: no such file or directory
controlplane ~/.kube ✖ kubectl get pods
error: unable to read client-cert /etc/kubernetes/pki/users/dev-user/developer-user.crt for 
dev-user due to open /etc/kubernetes/pki/users/dev-user/developer-user.crt: no such file or directory

controlplane ~/.kube ✖ tree /etc/kubernetes/pki/users
/etc/kubernetes/pki/users
├── aws-user
│   ├── aws-user.crt
│   ├── aws-user.csr
│   └── aws-user.key
├── dev-user
│   ├── dev-user.crt
│   ├── dev-user.csr
│   └── dev-user.key
└── test-user
    ├── test-user.crt
    ├── test-user.csr
    └── test-user.key

3 directories, 9 files

Couse in filename => due to open /etc/kubernetes/pki/users/dev-user/developer-user.crt: no such file or directory
controlplane ~/.kube ➜  vi /root/my-kube-config ---> change "/developer-user.crt" on "/dev-user.crt"
----------------------------------------------------------------------------------------------
