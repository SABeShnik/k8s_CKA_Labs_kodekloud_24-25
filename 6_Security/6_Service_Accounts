6_Service_Accounts

1. How many Service Accounts exist in the default namespace?
controlplane ~ ➜  kubectl get serviceaccounts 
NAME      SECRETS   AGE
default   0         5m53s
dev       0         34s ---> 2
-------------------------------------------------------------------------------------------------

2. What is the secret token used by the default service account?
controlplane ~ ➜  kubectl describe serviceaccounts default 
Name:                default
Namespace:           default
Labels:              <none>
Tokens:              <none> ---> None
-------------------------------------------------------------------------------------------------

3. We just deployed the Dashboard application. Inspect the deployment. What is the image used by the deployment?
controlplane ~ ➜  kubectl describe deployments.apps web-dashboard  | grep -i image
    Image:      gcr.io/kodekloud/customimage/my-kubernetes-dashboard ---> gcr.io/kodekloud/customimage/my-kubernetes-dashboard
-------------------------------------------------------------------------------------------------

4. Wait for the deployment to be ready. Access the custom-dashboard by clicking on the link to dashboard portal.
Error ---> pods is forbidden: User "system:serviceaccount:default:default" cannot list resource "pods" in API group "" in the namespace "default"
-------------------------------------------------------------------------------------------------

5. What is the state of the dashboard? Have the pod details loaded successfully? ---> Failed
-------------------------------------------------------------------------------------------------

6. What type of account does the Dashboard application use to query the Kubernetes API? ---> Service account (on web page app)
-------------------------------------------------------------------------------------------------

7. Which account does the Dashboard application use to query the Kubernetes API? ---> Default
-------------------------------------------------------------------------------------------------

8. Inspect the Dashboard Application POD and identify the Service Account mounted on it.
controlplane ~ ➜  kubectl get pods 
NAME                             READY   STATUS    RESTARTS   AGE
web-dashboard-66d58fc7b8-fdq7t   1/1     Running   0          4m2s

controlplane ~ ➜  kubectl describe pods web-dashboard-66d58fc7b8-fdq7t | grep -i account
Service Account:  default ---> default
-------------------------------------------------------------------------------------------------

9. At what location is the ServiceAccount credentials available within the pod?
controlplane ~ ➜  kubectl describe pods web-dashboard-66d58fc7b8-fdq7t | grep -i account
Service Account:  default
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-c57cc (ro) <--- Answer --->  /var/run/secrets
-------------------------------------------------------------------------------------------------

10. The application needs a ServiceAccount with the Right permissions to be created to authenticate to Kubernetes. 
The default ServiceAccount has limited access. Create a new ServiceAccount named dashboard-sa.
controlplane ~ ➜  kubectl create serviceaccount dashboard-sa
serviceaccount/dashboard-sa created
--- or ---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    kubernetes.io/enforce-mountable-secrets: "true"
  name: my-serviceaccount
  namespace: my-namespace
-------------------------------------------------------------------------------------------------

11. We just added additional permissions for the newly created dashboard-sa account using RBAC.
If you are interested checkout the files used to configure RBAC at /var/rbac. We will discuss RBAC in a separate section.
controlplane ~ ➜  ls /var/rbac
dashboard-sa-role-binding.yaml  pod-reader-role.yaml

controlplane ~ ➜  cat /var/rbac/dashboard-sa-role-binding.yaml 
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: read-pods
  namespace: default
subjects:
- kind: ServiceAccount
  name: dashboard-sa # Name is case sensitive
  namespace: default
roleRef:
  kind: Role         # this must be Role or ClusterRole
  name: pod-reader   # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io


controlplane ~ ➜  cat /var/rbac/pod-reader-role.yaml 
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups:
  - ''
  resources:
  - pods
  verbs:
  - get
  - watch
  - list
-------------------------------------------------------------------------------------------------

12. Enter the access token in the UI of the dashboard application. Click Load Dashboard button to load Dashboard
Create an authorization token for the newly created service account, copy the generated token and paste it into the token field of the UI.
To do this, run "kubectl create token dashboard-sa" for the dashboard-sa service account, copy the token and paste it in the UI.

controlplane ~ ➜  kubectl create token dashboard-sa
eyJhbGciOiJSUzI1NiIsImtpZCI6Ik5FUjMwNlMwZURwMXM2MnlyRkZYVUJFT0Q2QXZxZTQ3M2NmNWd0eFNwdzgifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiLCJrM3MiXSwiZXhwIjoxNzM1NjYzNzQ1LCJpYXQiOjE3MzU2NjAxNDUsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwianRpIjoiNzFlNGExNmEtMTljNC00ODFlLThkYmEtM2FlZWYyYzg0NzcxIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJkZWZhdWx0Iiwic2VydmljZWFjY291bnQiOnsibmFtZSI6ImRhc2hib2FyZC1zYSIsInVpZCI6IjYxNTIyZjRkLTM3OTAtNGI1ZC1iNjM2LTAxOWVhZTcwZmMxMyJ9fSwibmJmIjoxNzM1NjYwMTQ1LCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6ZGVmYXVsdDpkYXNoYm9hcmQtc2EifQ.ZhalBYkNg0KgB1um6Nn429r2VGIkWzjjmMguWomyfYBFtWMSpPv0Peqiu5SkPgN_ddwc7lusfor7U1jsz6Qg7J0iDnl2cdMJaP9FsCWaiLvU238NcPVORKf3FYMDRLTO3YTB3tsyc_ZyavRUhmmVdxlgJbc_MxL8JoI1Xk0OsdqI5axlFa-Sr58esV96bH9bLIuQLOl2TllUGUXcLAFfkAijZ0KCi8kPP0l8OpG1FYB7inqZ30NYJCMCZrFBV8SKcIfZMmMAFyVXwg7UfcUIpmMuAXRkRDdz6xO4UMkew9NLAChKuDSAQkgcpNwZ6Obml4s0NfL41BOiD2gSDGhiew

Got date:
Name	                          State	    Containers	 Service   Account	IP
web-dashboard-66d58fc7b8-fdq7t	Running	  1	           default	  10.42.0.9
-------------------------------------------------------------------------------------------------

13. You shouldn't have to copy and paste the token each time. 
The Dashboard application is programmed to read token from the secret mount location. 
However currently, the default service account is mounted. Update the deployment to use the newly created ServiceAccount
Edit the deployment to change ServiceAccount from default to dashboard-sa.

controlplane ~ ➜  kubectl get deployments.apps web-dashboard -oyaml > deploy.yml

controlplane ~ ➜  cat deploy.yml 
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  creationTimestamp: "2024-12-31T15:32:07Z"
  generation: 1
  name: web-dashboard
  namespace: default
  resourceVersion: "817"
  uid: fef8189a-239b-46f5-aedb-f2fdf8397443
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: web-dashboard
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        name: web-dashboard
    spec:
      serviceAccountName: dashboard-sa
      automountServiceAccountToken: true # by default I think
      containers:
      - env:
        - name: PYTHONUNBUFFERED
          value: "1"
        image: gcr.io/kodekloud/customimage/my-kubernetes-dashboard
        imagePullPolicy: Always
        name: web-dashboard
        ports:
        - containerPort: 8080
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status:
  availableReplicas: 1
  conditions:
  - lastTransitionTime: "2024-12-31T15:32:10Z"
    lastUpdateTime: "2024-12-31T15:32:10Z"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  - lastTransitionTime: "2024-12-31T15:32:07Z"
    lastUpdateTime: "2024-12-31T15:32:10Z"
    message: ReplicaSet "web-dashboard-66d58fc7b8" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  observedGeneration: 1
  readyReplicas: 1
  replicas: 1
  updatedReplicas: 1


--- or ----


apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "2"
  creationTimestamp: "2023-02-21T19:29:21Z"
  generation: 2
  name: web-dashboard
  namespace: default
  resourceVersion: "1499"
  uid: ac5a26bf-7a88-41cc-8db3-d5a4bd2ad31c
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: web-dashboard
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        name: web-dashboard
    spec:
      serviceAccountName: dashboard-sa    # <- Insert this line
      containers:
      - env:
        - name: PYTHONUNBUFFERED
          value: "1"
        image: gcr.io/kodekloud/customimage/my-kubernetes-dashboard
        imagePullPolicy: Always
        name: web-dashboard
        ports:
        - containerPort: 8080
          protocol: TCP
-------------------------------------------------------------------------------------------------

14. Refresh the Dashboard application UI and you should now see the PODs listed automatically.
This time you shouldn't have to put in the token manually.

-------------------------------------------------------------------------------------------------
