***************************************************************************
******* Static PODs *******************************************************
***************************************************************************


Статические Pod управляются непосредственно демоном kubelet на определенном узле, без наблюдения за ними со стороны сервера API. В отличие от Pod, которые управляются плоскостью управления (например, Deployment); вместо этого kubelet наблюдает за каждым статическим Pod (и перезапускает его в случае сбоя).
Статические Pod всегда привязаны к одному Kubelet на определенном узле. Kubelet автоматически пытается создать зеркальный Pod на сервере API Kubernetes для каждого статического Pod. Это означает, что Pod, работающие на узле, видны на сервере API, но не могут управляться оттуда. Имена Pod будут дополнены именем хоста узла с начальным дефисом.
ps -aux | grep kubelet
cat /var/lib/kubelet/config.yaml | grep tatic
staticPodPath: /etc/kubernetes/manifests
--------------------------------------------------------------------------------------------

1. How many static pods exist in this cluster in all namespaces?
kubectl get pods --all-namespaces -o custom-columns=NAME:.metadata.name,CONTROLLER:.metadata.o
wnerReferences[].kind,NAMESPACE:.metadata.namespace --___-- and find where CONTROLLER column -eq Node
--- or 
kubectl get pods --all-namespaces -o json | jq -r '.items | map(select(.metadata.ownerReferences[]?.kind == "Node" ) | .metadata.name) | .[]'
etcd-minikube
kube-apiserver-minikube
kube-controller-manager-minikube
kube-scheduler-minikube
--- or 
kubectl get pods -A | grep controlp ---> 4


2. Which of the below components is NOT deployed as a static pod?
kubectl get pods -A | grep controlp ---> coredns -> is not exist in the list


3. Which of the below components is NOT deployed as a static POD?
kubectl get pods -A | grep controlp ---> kube-proxy -> is not exist in the list


4. On which nodes are the static pods created currently?
kubectl get pods -A -o wide | grep controlp ---> controlplane


5. What is the path of the directory holding the static pod definition files?
/etc/kubelet/manifests (управляются непосредственно демоном kubelet на определенном узле)


6. How many pod definition files are present in the manifests directory?
ll /etc/kubernetes/manifests/ ---> 4 (как и этих ПОДов в системе)


7. What is the docker image used to deploy the kube-api server as a static pod?
cat kube-apiserver.yaml | grep -i image
    image: registry.k8s.io/kube-apiserver:v1.31.0 ---> registry.k8s.io/kube-apiserver:v1.31.0
    imagePullPolicy: IfNotPresent


8. Create a static pod named static-busybox that uses the busybox image and the command sleep 1000

mkdir -p /etc/kubelet/manifests
vi /etc/kubelet/manifests/static-busybox.yml

apiVersion: v1
kind: Pod
metadata:
  name: static-busybox

spec:
  containers:
  - name: static-busybox
    image: busybox
    resources:
    command:
      - sleep 1000

kubectl create -f /etc/kubelet/manifests/static-busybox.yml
Из этой Dir не заработало.
Просто положил в /etc/kubelet/manifests/static-busybox.yml и само развернулось и прокатило


9. Edit the image on the static pod to use busybox:1.28.4
Name: static-busybox
Image: busybox:1.28.4

vi /etc/kubernetes/manifests/static-busybox.yml ---> change image
controlplane /etc/kubernetes/manifests ➜  kubectl apply -f /etc/kubelet/manifests/static-busybox.yml


10. We just created a new static pod named static-greenbox. Find it and delete it.
This question is a bit tricky. But if you use the knowledge you gained in the previous questions in this lab, you should be able to find the answer to it.

kubectl get pods  --all-namespaces | grep -i green
default        static-greenbox-node01                 1/1     Running             0               2m8s

controlplane /etc/kubernetes/manifests ➜  kubectl delete pod static-greenbox-node01 
pod "static-greenbox-node01" deleted

controlplane /etc/kubernetes/manifests ➜  kubectl get pods  --all-namespaces | grep -i green
default        static-greenbox-node01                 0/1     Pending            0               4s

controlplane /etc/kubernetes/manifests ➜  ll /etc/kubernetes/manifests
total 32
drwxrwxr-x 1 root root 4096 Dec 27 11:31 ./
drwxrwxr-x 1 root root 4096 Dec 27 10:54 ../
-rw------- 1 root root 2565 Dec 27 10:54 etcd.yaml
-rw------- 1 root root 3898 Dec 27 10:54 kube-apiserver.yaml
-rw------- 1 root root 3394 Dec 27 10:54 kube-controller-manager.yaml
-rw-r--r-- 1 root root    0 Aug 13 08:22 .kubelet-keep
-rw------- 1 root root 1463 Dec 27 10:54 kube-scheduler.yaml
-rw-r--r-- 1 root root  177 Dec 27 11:31 static-busybox.yml

controlplane /etc/kubernetes/manifests ➜  kubectl get nodes
NAME           STATUS   ROLES           AGE   VERSION
controlplane   Ready    control-plane   43m   v1.31.0
node01         Ready    <none>          43m   v1.31.0

controlplane /etc/kubernetes/manifests ➜  ssh node01

ps -aux | grep kubelet
root       21735  0.0  0.1 2931236 76180 ?       Ssl  11:32   0:04 /usr/bin/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf --config=/var/lib/kubelet/config.yaml --container-runtime-endpoint=unix:///var/run/containerd/containerd.sock --pod-infra-container-image=registry.k8s.io/pause:3.10
root       26276  0.0  0.0   6800  2512 pts/0    S+   11:40   0:00 grep kubelet

node01 ~ ➜  cat /var/lib/kubelet/config.yaml
staticPodPath: /etc/just-to-mess-with-you
node01 ~ ➜  ls -l /etc/just-to-mess-with-you
total 4
-rw-r--r-- 1 root root 301 Dec 27 11:32 greenbox.yaml

node01 ~ ➜  rm /etc/just-to-mess-with-you/greenbox.yaml 

node01 ~ ➜  exit
logout
Connection to node01 closed.

controlplane /etc/kubernetes/manifests ✖ kubectl get pods  --all-namespaces | grep -i green

